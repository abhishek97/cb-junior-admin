{"version":3,"sources":["FIREBASE_CONFIG.js","lib/OrderedArrayInput.jsx","courses.tsx","contents.tsx","instructors.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["__webpack_require__","r","__webpack_exports__","d","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","ListItem","styled","div","_templateObject","props","isDragging","List","_templateObject2","isDraggingOver","Title","_templateObject3","noop","identity","v","ChoiceItem","value","index","react_default","a","createElement","react_beautiful_dnd_esm","draggableId","id","provided","snapshot","Object","assign","ref","innerRef","draggableProps","dragHandleProps","title","OrderedArrayInput","choices","input","values","children","React","cloneElement","selectedChoices","map","find","c","filter","length","onDragEnd","result","destination","source","newValues","Array","from","splice","onChange","droppableId","OrderedArrayInput_List","component","droppableProps","console","log","i","OrderedArrayInput_ChoiceItem","key","placeholder","AUDIENCE_VALUES","CourseFilter","react","Filter","TextInput","label","alwaysOn","CourseList","filters","courses_CourseFilter","Datagrid","TextField","RichTextField","ShowButton","EditButton","DeleteButton","CourseShow","Show","SimpleShowLayout","ImageField","lib","ReferenceArrayField","reference","UrlField","CourseCreate","Create","SimpleForm","esm","ImageInput","SelectArrayInput","name","optionValue","ReferenceArrayInput","filterToQuery","searchText","firstname","AutocompleteArrayInput","optionText","lib_OrderedArrayInput","CourseEdit","Edit","allowEmpty","ContentFilter","ContentList","contents_ContentFilter","ContentShow","ContentCreate","SelectInput","ContentEdit","InstructorFilter","InstructorList","instructors_InstructorFilter","InstructorShow","InstructorCreate","InstructorEdit","disabled","config","require","options","logging","process","dataProvider","FirebaseDataProvider","authProvider","FirebaseAuthProvider","App","Admin","Resource","list","show","create","edit","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7b922e7b.chunk.js","sourcesContent":["export const firebaseConfig = {\n  apiKey: \"AIzaSyATKbtqtaW5Qm-e51_m84afsRa5b5y6HGc\",\n  authDomain: \"codingblocks-online.firebaseapp.com\",\n  databaseURL: \"https://codingblocks-online.firebaseio.com\",\n  projectId: \"codingblocks-online\",\n  storageBucket: \"codingblocks-online.appspot.com\",\n  messagingSenderId: \"912821849090\",\n};","import React from \"react\";\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport styled from 'styled-components';\n\nconst ListItem = styled.div`\n  padding: 8px;\n  margin: 8px;\n  border: 1px solid grey;\n  background-color: ${props => props.isDragging ? 'lightgrey': 'white'}\n`\n\nconst List = styled.div`\n  padding: 8px;\n  border: 1px solid grey;\n  background-color: ${props => props.isDraggingOver ? '#2097F3': 'white'}\n`\n\nconst Title = styled.div`\n  font-weight: bold;\n  font-size: 1.2rem;\n  padding: 8px;\n`\n\nconst noop = () => {}\nconst identity = v => v\n\nconst OrderedArrayInput = (props) => {\n  const { id, choices, input } = props;\n  const { value: values} = input\n\n  const children = React.cloneElement(props.children, props)\n\n  const selectedChoices = (values || []).map(v => choices.find(c => c.id === v)).filter(identity)\n\n  const onDragEnd = result => {\n    const { destination, source, draggableId } = result\n\n    if (!destination || (destination.index === source.index)) return ;\n\n    const newValues = Array.from(values)\n    newValues.splice(source.index, 1);\n    newValues.splice(destination.index, 0, draggableId)\n\n    input.onChange(newValues)\n  }\n\n  return (\n    <div>\n      {children}\n      { selectedChoices.length ?\n      <DragDropContext onDragEnd={onDragEnd}>\n        <Droppable droppableId={id}>\n          {(provided, snapshot) => (\n            <List\n              component='nav'\n              ref={provided.innerRef}\n              isDraggingOver={snapshot.isDraggingOver}\n              {...provided.droppableProps}>\n\n              <Title>Order</Title>\n              {console.log(selectedChoices)}\n              {selectedChoices.map(\n                (v, i) => <ChoiceItem value={v} index={i} key={v.id} />\n              )}\n\n              {provided.placeholder}\n            </List>\n          )}\n\n        </Droppable>\n      </DragDropContext> : noop}\n    </div>\n  )\n}\n\n\nconst ChoiceItem = (props) => {\n  const { value, index } = props;\n  return (\n    <Draggable draggableId={value.id} index={index}>\n      {(provided, snapshot) => (\n        <ListItem\n          ref={provided.innerRef}\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n          isDragging={snapshot.isDragging}\n        >\n          [<i>#{value.id}</i>] <b>{value.title || <i> \"DELETED\" </i>}</b>\n        </ListItem>\n      )}\n    </Draggable>\n  )\n}\n\nexport default OrderedArrayInput;","// in src/Courses.js\nimport * as React from \"react\";\n// tslint:disable-next-line:no-var-requires\nimport {\n  Datagrid,\n  List,\n  Show,\n  Create,\n  Edit,\n  Filter,\n  // DisabledInput,\n  SimpleShowLayout,\n  SimpleForm,\n  TextField,\n  TextInput,\n  ShowButton,\n  EditButton,\n  DeleteButton,\n  RichTextField,\n  ReferenceArrayField,\n  ImageField,\n  ReferenceArrayInput,\n  AutocompleteArrayInput,\n  ImageInput,\n  UrlField,\n  SelectArrayInput\n} from \"react-admin\";\n\nimport RichTextInput from \"ra-input-rich-text\";\nimport OrderedArrayInput from \"./lib/OrderedArrayInput\";\nimport { ColorField, ColorInput } from 'react-admin-color-input';\n\nconst AUDIENCE_VALUES = ['1st - 4th', '5th - 8th', '9th - 10th', '11th - 12th'];\n\nconst CourseFilter = (props: any) => {\n  return (<Filter {...props}>\n    <TextInput label=\"Search\" source=\"title\" alwaysOn />\n  </Filter>);\n};\n\n\nexport const CourseList = (props: any) => (\n  <List {...props} filters={<CourseFilter />}>\n    <Datagrid>\n      <TextField source=\"title\" />\n      <RichTextField source=\"subtitle\" />\n      <TextField source=\"slug\" />\n      <ShowButton label=\"\" />\n      <EditButton label=\"\" />\n      <DeleteButton label=\"\" />\n    </Datagrid>\n  </List>\n);\n\nexport const CourseShow = (props: any) => (\n  <Show {...props}>\n    <SimpleShowLayout>\n      <TextField source=\"id\" />\n      <TextField source=\"title\" />\n      <RichTextField source=\"subtitle\" />\n      <TextField source=\"slug\" />\n      <ImageField source=\"logo.src\" />\n      <ImageField source=\"background.src\" />\n      <ColorField source=\"theme_color\" />\n      <ReferenceArrayField source=\"contents\" label=\"Contents\" reference=\"contents\">\n        <Datagrid>\n          <TextField source=\"title\" label=\"Title\"/>\n          <UrlField source=\"url\" label=\"Url\"/>\n        </Datagrid>\n      </ReferenceArrayField>\n    </SimpleShowLayout>\n  </Show>\n);\n\nexport const CourseCreate = (props: any) => (\n  <Create {...props}>\n    <SimpleForm>\n      <TextInput source=\"title\" />\n      <RichTextInput source=\"subtitle\" />\n      <TextInput source=\"slug\" />\n      <ImageInput source=\"logo\">\n        <ImageField source=\"src\" title=\"title\" />\n      </ImageInput>\n      <ImageInput source=\"background\">\n        <ImageField source=\"src\" title=\"title\" />\n      </ImageInput>\n      <ColorInput source=\"theme_color\" label=\"Theme Color\"/>\n\n      <SelectArrayInput source=\"audience\" choices={AUDIENCE_VALUES.map(a => ({name: a}))} optionValue=\"name\" />\n\n      <ReferenceArrayInput\n          label=\"Instructors\"\n          source=\"instructorIds\"\n          reference=\"Instructors\"\n          filterToQuery={ (searchText :any) => ({ firstname: searchText })}\n      >\n        <AutocompleteArrayInput optionText='firstname'/>\n      </ReferenceArrayInput>\n\n      <ReferenceArrayInput label=\"contents\" source=\"contents\" reference=\"contents\"\n                           filterToQuery={ (searchText :any) => ({ title: searchText })}\n      >\n        <OrderedArrayInput>\n          <AutocompleteArrayInput optionText='title' />\n        </OrderedArrayInput>\n      </ReferenceArrayInput>\n    </SimpleForm>\n  </Create>\n);\n\nexport const CourseEdit = (props: any) => (\n  <Edit {...props}>\n    <SimpleForm>\n      {/* <DisabledInput source=\"id\" /> */}\n      <TextInput source=\"title\" />\n      <RichTextInput source=\"subtitle\" />\n      <TextInput source=\"slug\" />\n      <ImageInput source=\"logo\">\n        <ImageField source=\"src\" title=\"title\" />\n      </ImageInput>\n      <ImageInput source=\"background\">\n        <ImageField source=\"src\" title=\"title\" />\n      </ImageInput>\n      <ColorInput source=\"theme_color\" label=\"Theme Color\"/>\n\n      <SelectArrayInput source=\"audience\" choices={AUDIENCE_VALUES.map(a => ({name: a}))} optionValue=\"name\" />\n\n      <ReferenceArrayInput\n        label=\"Instructors\"\n        source=\"instructorIds\"\n        reference=\"Instructors\"\n        filterToQuery={ (searchText :any) => ({ firstname: searchText })}\n        >\n        <AutocompleteArrayInput optionText='firstname' allowEmpty/>\n      </ReferenceArrayInput>\n\n      <ReferenceArrayInput label=\"contents\" source=\"contents\" reference=\"contents\"\n                           filterToQuery={ (searchText :any) => ({ title: searchText })}\n      >\n        <OrderedArrayInput>\n          <AutocompleteArrayInput optionText='title' />\n        </OrderedArrayInput>\n      </ReferenceArrayInput>\n      {/* <SelectInput\n        source=\"rating\"\n        choices={[\n          { id: 1, name: \"Good\" },\n          { id: 2, name: \"Okay\" },\n          { id: 3, name: \"Bad\" }\n        ]}\n      />\n      <FileInput source=\"file\" label=\"File\" accept=\"application/pdf\">\n        <FileField source=\"src\" title=\"title\" />\n      </FileInput> */}\n    </SimpleForm>\n  </Edit>\n);\n","// in src/posts.js\nimport * as React from \"react\";\n// tslint:disable-next-line:no-var-requires\nimport {\n  Datagrid,\n  List,\n  Show,\n  Create,\n  Edit,\n  Filter,\n  // DisabledInput,\n  SimpleShowLayout,\n  SimpleForm,\n  TextField,\n  TextInput,\n  ShowButton,\n  EditButton,\n  DeleteButton,\n  RichTextField,\n  SelectInput,\n  FileField,\n  FileInput,\n  UrlField\n} from \"react-admin\";\nimport RichTextInput from \"ra-input-rich-text\";\nimport YouTube from \"react-youtube\";\nimport getYouTubeID from \"get-youtube-id\";\n\nconst ContentFilter = (props: any) => {\n  return (<Filter {...props}>\n    <TextInput label=\"Search\" source=\"title\" alwaysOn />\n  </Filter>);\n};\n\nexport const ContentList = (props: any) => (\n  <List {...props} filters={<ContentFilter />}>\n    <Datagrid>\n      <TextField source=\"title\" />\n      <TextField source=\"type\" />\n      <ShowButton label=\"\" />\n      <EditButton label=\"\" />\n      {/*<DeleteButton label=\"\" />*/}\n    </Datagrid>\n  </List>\n);\n\nexport const ContentShow = (props: any) => (\n  <Show {...props}>\n    <SimpleShowLayout>\n      <TextField source=\"title\" />\n      <TextField source=\"type\" />\n      {/*<YouTube videoId={getYouTubeID(\"url\")}*/}\n      <UrlField source=\"url\" />\n    </SimpleShowLayout>\n  </Show>\n);\n\nexport const ContentCreate = (props: any) => (\n  <Create {...props}>\n    <SimpleForm>\n      <TextInput source=\"title\" />\n      <SelectInput\n          source=\"type\"\n          choices={[\n            { id: 'ytvideo', name: \"Youtube Video\" },\n          ]}\n      />\n      <TextInput source=\"url\" />\n    </SimpleForm>\n  </Create>\n);\n\nexport const ContentEdit = (props: any) => (\n  <Edit {...props}>\n    <SimpleForm>\n      {/* <DisabledInput source=\"id\" /> */}\n      <TextInput source=\"title\" />\n      <SelectInput\n          source=\"type\"\n          choices={[\n            { id: 'ytvideo', name: \"Youtube Video\" },\n          ]}\n      />\n      <TextInput source=\"url\" />\n    </SimpleForm>\n  </Edit>\n);\n","// in src/Instructors.js\nimport * as React from \"react\";\n// tslint:disable-next-line:no-var-requires\nimport {\n  Datagrid,\n  List,\n  Show,\n  Create,\n  Edit,\n  Filter,\n  // DisabledInput,\n  SimpleShowLayout,\n  ReferenceField,\n  SimpleForm,\n  TextField,\n  TextInput,\n  ShowButton,\n  EditButton,\n  DeleteButton,\n  RichTextField,\n  SelectInput,\n  FileField,\n  FileInput,\n  ReferenceInput,\n  ReferenceArrayField,\n  ImageField,\n  ReferenceArrayInput,\n  AutocompleteArrayInput,\n  ImageInput,\n  DisabledInput\n} from \"react-admin\";\n\nimport RichTextInput from \"ra-input-rich-text\";\nimport OrderedArrayInput from \"./lib/OrderedArrayInput\";\n\nconst InstructorFilter = (props: any) => {\n  return (<Filter {...props}>\n    <TextInput label=\"Search\" source=\"firstname\" alwaysOn />\n  </Filter>);\n};\n\n\nexport const InstructorList = (props: any) => (\n  <List {...props} filters={<InstructorFilter />}>\n    <Datagrid>\n      <TextField source=\"firstname\" />\n      <TextField source=\"lastname\" />\n      <ShowButton label=\"\" />\n      <EditButton label=\"\" />\n      {/*<DeleteButton label=\"\" />*/}\n    </Datagrid>\n  </List>\n);\n\nexport const InstructorShow = (props: any) => (\n  <Show {...props}>\n    <SimpleShowLayout>\n      <TextField source=\"id\" />\n      <TextField source=\"firstname\" />\n      <TextField source=\"lastname\" />\n      <ImageField source=\"photo.src\" />\n    </SimpleShowLayout>\n  </Show>\n);\n\nexport const InstructorCreate = (props: any) => (\n  <Create {...props}>\n    <SimpleForm>\n      <TextInput source=\"firstname\" />\n      <TextInput source=\"lastname\" />\n      <ImageInput source=\"photo\">\n        <ImageField source=\"src\" title=\"title\" />\n      </ImageInput>\n    </SimpleForm>\n  </Create>\n);\n\nexport const InstructorEdit = (props: any) => (\n  <Edit {...props}>\n    <SimpleForm>\n      <TextInput source=\"id\" disabled={true} />\n      <TextInput source=\"firstname\" />\n      <TextInput source=\"lastname\" />\n      <ImageInput source=\"photo\">\n        <ImageField source=\"src\" title=\"title\" />\n      </ImageInput>\n    </SimpleForm>\n  </Edit>\n);\n","import * as React from \"react\";\nimport { PostList, PostShow, PostCreate, PostEdit } from \"./posts\";\nimport { CourseList, CourseCreate, CourseEdit, CourseShow } from './courses';\nimport { Admin, Resource } from \"react-admin\";\nimport {\n  FirebaseDataProvider,\n  FirebaseAuthProvider,\n  RAFirebaseOptions\n} from \"react-admin-firebase\";\nimport {ContentCreate, ContentEdit, ContentList, ContentShow} from \"./contents\";\nimport {InstructorCreate, InstructorEdit, InstructorList, InstructorShow} from './instructors'\n\nconst config = require(\"./FIREBASE_CONFIG.js\").firebaseConfig;\n\nconst options: RAFirebaseOptions = {\n  logging: process.env.NODE_ENV != 'production',\n  // rootRef: \"/\",\n  //   dontwatch: ['courses', 'Instructors', 'contents']\n};\nconst dataProvider = FirebaseDataProvider(config, options);\nconst authProvider = FirebaseAuthProvider(config, options);\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Admin dataProvider={dataProvider} authProvider={authProvider}>\n        <Resource\n          name=\"courses\"\n          list={CourseList}\n          show={CourseShow}\n          create={CourseCreate}\n          edit={CourseEdit}\n        />\n\n        <Resource\n          name=\"Instructors\"\n          list={InstructorList}\n          show={InstructorShow}\n          create={InstructorCreate}\n          edit={InstructorEdit}\n        />\n\n        <Resource\n          name=\"contents\"\n          list={ContentList}\n          show={ContentShow}\n          create={ContentCreate}\n          edit={ContentEdit}\n        />\n        \n        {/*<Resource*/}\n        {/*  name=\"posts\"*/}\n        {/*  list={PostList}*/}\n        {/*  show={PostShow}*/}\n        {/*  create={PostCreate}*/}\n        {/*  edit={PostEdit}*/}\n        {/*/>*/}\n      </Admin>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}